{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["defaults","icon","color","size","animate","iconMap","Map","set","App","getLocation","navigator","geolocation","getCurrentPosition","setPosition","alert","position","setState","latitude","coords","longitude","fetchData","fetch","state","process","then","response","json","data","weather","weatherData","appError","catch","err","console","log","isDay","slice","this","setInterval","className","get","Math","round","main","temp","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAIIA,EAAW,CACbC,KAAM,YACNC,MAAO,QACPC,KAAM,IACNC,SAAS,GAGPC,EAAU,IAAIC,IAClBD,EAAQE,IAAI,MAAO,aACnBF,EAAQE,IAAI,MAAO,eACnBF,EAAQE,IAAI,MAAO,qBACnBF,EAAQE,IAAI,MAAO,uBACnBF,EAAQE,IAAI,MAAO,UACnBF,EAAQE,IAAI,MAAO,UACnBF,EAAQE,IAAI,MAAO,UACnBF,EAAQE,IAAI,MAAO,UACnBF,EAAQE,IAAI,MAAO,QACnBF,EAAQE,IAAI,MAAO,QACnBF,EAAQE,IAAI,MAAO,QACnBF,EAAQE,IAAI,MAAO,QACnBF,EAAQE,IAAI,MAAO,QACnBF,EAAQE,IAAI,MAAO,QACnBF,EAAQE,IAAI,MAAO,QACnBF,EAAQE,IAAI,MAAO,QACnBF,EAAQE,IAAI,MAAO,OACnBF,EAAQE,IAAI,MAAO,O,IAsIJC,E,kDApFb,aAAc,IAAD,8BACX,gBAgBFC,YAAc,WACRC,UAAUC,YACZD,UAAUC,YAAYC,mBAAmB,EAAKC,aAE9CC,MAAM,kDArBG,EAyBbD,YAAc,SAACE,GACb,EAAKC,SAAS,CAACC,SAAUF,EAASG,OAAOD,WACzC,EAAKD,SAAS,CAACG,UAAWJ,EAASG,OAAOC,YAC1C,EAAKC,aA5BM,EA+BbA,UAAY,WACVC,MAAM,uDAAD,OAAwD,EAAKC,MAAML,SAAnE,gBAAmF,EAAKK,MAAMH,UAA9F,kBAAiHI,mCAAjH,kBACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACDA,EAAKC,QACR,EAAKZ,SAAS,CAACa,YAAaF,IAE1B,EAAKX,SAAS,CAACc,SAAUH,OAG5BI,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAzCf,EA4CbG,MAAQ,WACN,MAAwD,MAArD,EAAKb,MAAMO,YAAYD,QAAQ,GAAG3B,KAAKmC,OAAO,IAC/CpC,EAASE,MAAQ,SACV,IAEPF,EAASE,MAAQ,SACV,IAhDT,EAAKoB,MAAQ,CACXO,YAAa,KACbC,SAAU,KACVb,SAAU,KACVE,UAAW,MANF,E,qDAUb,WAAoB,IAAD,OACjBkB,KAAK5B,cACL6B,aAAY,WACV,EAAKlB,cACJ,Q,oBAyCL,WACE,IAAMS,EAAcQ,KAAKf,MAAMO,YAE/B,OAAGQ,KAAKf,MAAMQ,SACL,8DAGJD,EAIH,sBAAKU,UAAW,QAAUF,KAAKF,QAAU,GAAK,SAA9C,UACE,cAAC,IAAD,CACIlC,KAAMI,EAAQmC,IAAIX,EAAYD,QAAQ,GAAG3B,MACzCC,MAAOF,EAASE,MAChBC,KAAMH,EAASG,KACfC,QAASJ,EAASI,UAEtB,gCACE,+BAAKqC,KAAKC,MAAMb,EAAYc,KAAKC,MAAjC,YACA,6BAAKf,EAAYD,QAAQ,GAAGe,aAZzB,iC,GAjEKE,IAAMC,WCjETC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.14b1266d.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport ReactAnimatedWeather from 'react-animated-weather';\n \nlet defaults = {\n  icon: 'CLEAR_DAY',\n  color: 'white',\n  size: 100,\n  animate: true\n};\n\nlet iconMap = new Map();\niconMap.set('01d', 'CLEAR_DAY');\niconMap.set('01n', 'CLEAR_NIGHT');\niconMap.set('02d', 'PARTLY_CLOUDY_DAY');\niconMap.set('02n', 'PARTLY_CLOUDY_NIGHT');\niconMap.set('03d', 'CLOUDY');\niconMap.set('03n', 'CLOUDY');\niconMap.set('04d', 'CLOUDY');\niconMap.set('04n', 'CLOUDY');\niconMap.set('09d', 'RAIN');\niconMap.set('09n', 'RAIN');\niconMap.set('10d', 'RAIN');\niconMap.set('10n', 'RAIN');\niconMap.set('11d', 'RAIN');\niconMap.set('11n', 'RAIN');\niconMap.set('13d', 'SNOW');\niconMap.set('13n', 'SNOW');\niconMap.set('50d', 'FOG');\niconMap.set('50n', 'FOG');\n\n/*const sampleRes = {\n  \"coord\": {\n    \"lon\": -122.08,\n    \"lat\": 37.39\n  },\n  \"weather\": [\n    {\n      \"id\": 800,\n      \"main\": \"Clear\",\n      \"description\": \"clear sky\",\n      \"icon\": \"01d\"\n    }\n  ],\n  \"base\": \"stations\",\n  \"main\": {\n    \"temp\": 282.55,\n    \"feels_like\": 281.86,\n    \"temp_min\": 280.37,\n    \"temp_max\": 284.26,\n    \"pressure\": 1023,\n    \"humidity\": 100\n  },\n  \"visibility\": 16093,\n  \"wind\": {\n    \"speed\": 1.5,\n    \"deg\": 350\n  },\n  \"clouds\": {\n    \"all\": 1\n  },\n  \"dt\": 1560350645,\n  \"sys\": {\n    \"type\": 1,\n    \"id\": 5122,\n    \"message\": 0.0139,\n    \"country\": \"US\",\n    \"sunrise\": 1560343627,\n    \"sunset\": 1560396563\n  },\n  \"timezone\": -25200,\n  \"id\": 420006353,\n  \"name\": \"Mountain View\",\n  \"cod\": 200\n};*/                    \n\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      weatherData: null,\n      appError: null,\n      latitude: null,\n      longitude: null\n    };\n  }\n\n  componentDidMount(){\n    this.getLocation();\n    setInterval(() => {\n      this.fetchData();\n    }, 250000);\n  }\n\n  getLocation = () =>{\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.setPosition);\n    } else { \n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  }\n  \n  setPosition = (position) =>{\n    this.setState({latitude: position.coords.latitude}); \n    this.setState({longitude: position.coords.longitude});\n    this.fetchData();\n  }\n// (`http://api.openweathermap.org/data/2.5/weather?lat=${this.state.latitude}&lon=${this.state.longitude}&appid=${APIKey}&units=metric`)\n  fetchData = () =>{\n    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.latitude}&lon=${this.state.longitude}&appid=${process.env.REACT_APP_SECRET_KEY}&units=metric`)\n    .then(response => response.json())\n    .then(data => {\n      if(data.weather){\n      this.setState({weatherData: data});\n      } else{\n        this.setState({appError: data});\n      }\n    })\n    .catch(err => console.log(err))\n  }\n\n  isDay = () =>{\n    if(this.state.weatherData.weather[0].icon.slice(-1) === 'd'){\n      defaults.color = 'black';\n      return true;\n    } else {\n      defaults.color = 'white';\n      return false;\n    }\n  }\n\n\n  render(){\n    const weatherData = this.state.weatherData;\n\n    if(this.state.appError){\n      return <h1>Failed to load weather data.</h1>\n    }\n\n    if (!weatherData){\n      return <></>\n    }else{\n      return (\n      <div className={'App ' + (this.isDay() ? '' : 'night')}>\n        <ReactAnimatedWeather\n            icon={iconMap.get(weatherData.weather[0].icon)}\n            color={defaults.color}\n            size={defaults.size}\n            animate={defaults.animate}\n          />\n        <div>\n          <h3>{Math.round(weatherData.main.temp)} Â°C</h3>\n          <h3>{weatherData.weather[0].main}</h3>\n        </div>\n      </div>\n      );\n    }\n  }\n}\n\n//     <img src={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`} alt={weatherData.weather[0].description} />\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}